{"version":3,"sources":["shadow_calendar/core.cljs"],"mappings":";;;;;AAQA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAAA,AAAA,AAACC;;AAEpB,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGQ,AAAA,AAAA,AAAAC,AAAQH,AAEb,AAACI,AAAuBC;;AAG3B,AAAA,AAAMC;AAAN,AACE,AAAA,AAACC,AAAgBC,AACS,AAAA,AAAGC;;AAE/B,AAAA,AAAeC;AAAf,AAIE,AAACJ;;;AAEH,AAAA,AAAMK;AAAN,AAGE,AAAA,AAACC","names":["js/shadow-calendar","js/shadow-calendar.core","js/shadow-calendar.core.app-state","shadow-calendar.core/app-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","shadow-calendar.core/calendar","cljs.core/deref","reagent.core.create_element.cljs$core$IFn$_invoke$arity$1","js/module$shadow_calendar$bar.myComponent","shadow-calendar.core/start","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/Calendar","js/document","shadow-calendar.core/init","shadow-calendar.core/stop","js/console.log"],"sourcesContent":["(ns shadow-calendar.core\n  (:require [reagent.core :as reagent :refer [atom]]\n            [\"./hello\" :as hello]\n            [\"./bar\" :refer (myComponent)]\n            [\"./calendar\" :as Calendar]))\n\n;; define your app data so that it doesn't get over-written on reload\n\n(defonce app-state (atom {:text \"Hello world!\"}))\n\n(defn calendar []\n;;  (.hello/sayHello \"Hello\")\n  [:div\n   [:h1 (:text @app-state)]\n   ;;[calendar]\n   (reagent/create-element myComponent)\n   [:h3 \"Edit this and watch it change!\"]])\n\n(defn start []\n  (reagent/render [js/Calendar]\n                            (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}